spring.application.name=user-management-service

#spring.datasource.url=jdbc:h2:mem:testdb
#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=password
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
#spring.h2.console.enabled=true
#spring.h2.console.path=/h2-console

# Other properties
#server.port=8081

# DataSource configuration
#spring.datasource.url=jdbc:mariadb://localhost:3306/user_management
# In a Docker Compose, using localhost within a service won't work for connecting to other services
spring.datasource.url=jdbc:mariadb://user-management-db:3306/user_management
spring.datasource.username=app_user
#${USER_MANAGEMENT_DB_USER}
spring.datasource.password=${MARIADB_APP_PASSWORD} 
#mypass
#${USER_MANAGEMENT_DB_USER_PASSWORD}
spring.datasource.driver-class-name=org.mariadb.jdbc.Driver

# Hibernate configuration

# Automatically update the database schema based on the JPA entities.
# change this to 'create' if you want the schema to be dropped and 
# recreated every time the application starts (useful for development).
spring.jpa.hibernate.ddl-auto=update

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MariaDBDialect

spring.datasource.data=classpath:data.sql
spring.datasource.initialization-mode=always

# not localhost in Docker, but the container name
spring.rabbitmq.host=rabbitmq
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

# check the logs after the application has started
# configure Spring Boot to write logs to a file
logging.file.name=application.log

springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.path=/swagger-ui/

# configure Micrometer
# ensure the health endpoint is enabled
management.endpoints.web.exposure.include=health,info,prometheus
# this exposes a /actuator/prometheus endpoint for the service
management.metrics.export.prometheus.enabled=true

# allows Feign clients to use Spring Cloud LoadBalancer 
# for distributing requests across multiple instances of a service
feign.client.config.default.loadBalancer.enabled=true

# verify that Spring Cloud's auto-configuration is properly enabled
spring.cloud.loadbalancer.enabled=true








